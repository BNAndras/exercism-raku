#!/usr/bin/env perl6
use v6;{{=#`{{ }}=}}#`{{! Mustache tags double up as Perl 6 embedded comments}}
use Test;
use lib #`{{#cdata}}my $dir = #`{{/cdata}}$?FILE.IO.dirname;#`{{#lib_comment}} #`[#`{{&lib_comment}}]#`{{/lib_comment}}#`{{#cdata}}
use JSON::Fast;#`{{/cdata}}#`{{#modules}}
use #`{{&use}};#`{{/modules}}

my Str:D $exercise#`{{#exercise}} := '#`{{&exercise}}'#`{{/exercise}};#`{{#exercise_comment}} #`[#`{{&exercise_comment}}]#`{{/exercise_comment}}
my Version:D $version#`{{#version}} = v#`{{&version}}#`{{/version}};#`{{#version_comment}} #`[#`{{&version_comment}}]#`{{/version_comment}}
my Str $module //= $exercise;#`{{#module_comment}} #`[#`{{&module_comment}}]#`{{/module_comment}}#`{{#plan}}
#`{{#cdata}}INIT {
  #`{{/cdata}}plan #`{{&plan}};#`{{#plan_comment}} #`[#`{{&plan_comment}}]#`{{/plan_comment}}#`{{#cdata}}
}#`{{/cdata}}#`{{/plan}}
#`{{#use_test_comment}}

#`[#`{{&use_test_comment}}]#`{{/use_test_comment}}
use-ok $module or bail-out;
require ::($module);
#`{{#version_test_comment}}

#`[#`{{&version_test_comment}}]#`{{/version_test_comment}}
if ::($exercise).^ver !~~ $version {
  warn "\nExercise version mismatch. Further tests may fail!"
    ~ "\n$exercise is $(::($exercise).^ver.gist). "
    ~ "Test is $($version.gist).\n";
  bail-out 'Example version must match test version.' if %*ENV<EXERCISM>;
}
#`{{#imports}}#`{{#imports_comment}}
#`[#`{{&imports_comment}}]#`{{/imports_comment}}
require ::($module) <#`{{&imports}}>;
#`{{/imports}}#`{{#methods}}#`{{#methods_comment}}
#`[#`{{&methods_comment}}]#`{{/methods_comment}}
subtest 'Class methods', {
  ok ::($exercise).can($_), $_ for <#`{{&methods}}>;
}
#`{{/methods}}#`{{#cdata}}
my $c-data;#`{{/cdata}}
#`{{&tests}}

INIT {
#`{{#cdata}}$c-data := from-json q:to/END/;

#`{{&json}}
END

#`{{/cdata}}  if %*ENV<EXERCISM> {#`{{#exercism_comment}}
#`[#`{{&exercism_comment}}]#`{{/exercism_comment}}
    $module = 'Example';#`{{#cdata}}
    if (my $c-data-file =
      "$dir/../../problem-specifications/exercises/{$dir.IO.resolve.basename}/canonical-data.json"
      .IO.resolve) ~~ :f
    {
      is-deeply $c-data, EVAL('from-json $c-data-file.slurp'), 'canonical-data';
    }
    else {
      flunk 'canonical-data';
    }
  }
  else {
    skip;#`{{/cdata}}
  }
}
