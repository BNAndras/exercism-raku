exercise: TwoFer
version: 2
plan: 3
tests: |-
  # Go through the cases and check that &two-fer gives us the correct response.
  for $c-data<cases>.values {
    is .<input> ??
      two-fer(.<input>) !!
      two-fer,
      |.<expected description>;
  }

version_comment: The version we will be matching against the exercise.
lib_comment: Look for the module inside the same directory as this test file.
plan_comment: This is how many tests we expect to run.
version_test_comment: "If the exercise is updated, we want to make sure other people testing\nyour code don't think you've made a mistake if things have changed!"

unit: module
unit_comment: |-
  #`(
    This is a 'stub' file. It's a little start on your solution.
    It is not a complete solution though; you will have to write some code.

    The ':ver<>' adverb defines the version of a module or class.
    The version is checked in the test suite to ensure the exercise
    and test suite line up. If the test is updated, it will indicate
    to others who test your code that some tests may no longer pass.
  )
example: |-
  sub two-fer ($name = ‘you’) is export {
    “One for $name, one for me.”
  }
stub: |-
  sub two-fer ($name?) is export {
    # Write your solution to pass the test suite here.
    # Be sure to remove all stock comments once you are done!
  }
