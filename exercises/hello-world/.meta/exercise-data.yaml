exercise: HelloWorld
plan: 1
tests: |-
  # Loop over the cases array taken from the canonical data JSON below.
  for @($c-data<cases>) -> %case {
    # Run the 'is' subroutine from the 'Test' module, with three arguments.
    is(
      hello,             # Run the 'hello' subroutine, which is imported from your module.
      %case<expected>,   # The expected result from canonical data to compare with 'hello'.
      %case<description> # The test description from canonical data.
    );
  }

lib_comment: Look for the module inside the same directory as this test file.
plan_comment: This is how many tests we expect to run.

unit: module
unit_comment: |-
  #`(
    This is a 'stub' file. It's a little start on your solution.
    It is not a complete solution though; you will have to write some code.

    The ':ver<>' adverb defines the version of a module or class.
    The version is checked in the test suite to ensure the exercise
    and test suite line up. If the test is updated, it will indicate
    to others who test your code that some tests may no longer pass.
  )
example: |-
  sub hello is export {
    'Hello, World!'
  }
stub: |-
  sub hello is export {
    # Write your solution to pass the test suite here.
    # Be sure to remove all stock comments once you are done!
  }
