exercise: Clock
version: 1
methods: time add-minutes
plan: 54
tests: |-
  for $c-data<cases>»<cases>».Array.flat -> %case {
    given %case<property> {
      when 'create' {
        is ::($exercise).?new( |%(.<hour minute>:p) ).?time, |.<expected description> given %case;
      }
      when 'add' {
        given %case {
          my $clock = ::($exercise).?new: |%(.<hour minute>:p);
          $clock.?add-minutes: .<add>;
          is $clock.?time, |.<expected description>;
        }
      }
      when 'equal' {
        is-deeply ([eq] gather {
          take ::($exercise).?new( |%(.<hour minute>:p) ).?time for %case<clock1 clock2>;
        }), |%case<expected description>;
      }
      when %*ENV<EXERCISM>.so { bail-out "no case for property '%case<property>'" }
    }
  }

  todo 'optional test' unless %*ENV<EXERCISM>;
  is ::($exercise).?new(:0hour,:0minute).?add-minutes(65).?time, '01:05', 'add-minutes method can be chained';

unit: class
example: |-
  has Int:D $.hour = 0;
  has Int:D $.minute = 0;

  method time {
    sprintf '%02d:%02d', ($!hour + $!minute div 60) % 24, $!minute % 60;
  }

  method add-minutes (Int:D $min) {
    $!minute += $min and return self;
  }
stub: |-
  has $.hour;
  has $.minute;
